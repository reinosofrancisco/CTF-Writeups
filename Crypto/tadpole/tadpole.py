from Crypto.Util.number import bytes_to_long, long_to_bytes, isPrime
from secrets import randbelow
from math import gcd


p = bytes_to_long(open("flag.txt", "rb").read())
print("Bytes to Long P =", p) #6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151

# assert isPrime(p) # -> Hint, P is Prime

# a = randbelow(p)
a = 7904681699700731398014734140051852539595806699214201704996640156917030632322659247608208994194840235514587046537148300460058962186080655943804500265088604049870276334033409850015651340974377752209566343260236095126079946537115705967909011471361527517536608234561184232228641232031445095605905800675590040729

# b = randbelow(p)
b = 16276123569406561065481657801212560821090379741833362117064628294630146690975007397274564762071994252430611109538448562330994891595998956302505598671868738461167036849263008183930906881997588494441620076078667417828837239330797541019054284027314592321358909551790371565447129285494856611848340083448507929914

print("Long to Bytes Flag = ",long_to_bytes(p))

s = 31337
# Siempre recibe el mismo S

#This is a Linear Congruence Generator
def f(s):
    return (a * s + b) % p

s1 = f(s)
s2 = f(f(s))
s3 = f(f(f(s)))

print("")
print("s0 = ", s)
print("f(31337) = s1 =", s1)
print("f(f(31337)) = s2 =", s2)
print("f(f(f(31337))) = s3 = ", s3)

print("")
print("t0 = ", s1 - s)
print("t1 = ", s2 - s1)
print("t2 = ", s3 - s2)

res = 16276123569406561065481657801212560821090379741833362117064628294630146690975007397274564762071994252430611109538448562330994891595998956302505598671868738461167036849263008183930906881997588494441620076078667417828837239330797541019054284027314592321358909551790371565447129285494856611848340083448507929914

print("")
print("Is (s2 - s1)/(s1 - s) % res =", ((s2 - s1)/(s1 - s)) % res)
print("Equals to = ", a)

f_1 = 52926479498929750044944450970022719277159248911867759992013481774911823190312079157541825423250020665153531167070545276398175787563829542933394906173782217836783565154742242903537987641141610732290449825336292689379131350316072955262065808081711030055841841406454441280215520187695501682433223390854051207100
f_2 = 65547980822717919074991147621216627925232640728803041128894527143789172030203362875900831296779973655308791371486165705460914922484808659375299900737148358509883361622225046840011907835671004704947767016613458301891561318029714351016012481309583866288472491239769813776978841785764693181622804797533665463949

pn_1 = f_1 - ((a * s) + b)
pn_2 = f_2 - ((a * f_1) + b)
p = gcd(pn_1, pn_2)


assert f_1 == f(31337)
assert f_2 == f(f(31337))

print(long_to_bytes(p))
